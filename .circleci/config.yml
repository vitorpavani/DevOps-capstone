version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo destroy environment
              aws s3 rb "s3://udacitycapstone-${CIRCLE_WORKFLOW_ID:0:7}" --force 
              aws cloudformation delete-stack --stack-name "udacitycapstone-frontend-${CIRCLE_WORKFLOW_ID:0:7}"
              aws cloudformation delete-stack --stack-name "udacitycapstone-backend-${CIRCLE_WORKFLOW_ID:0:7}"

jobs:
  run-docker:
    docker:
      - image: vipavani85/capstone:v1
    steps:
      - checkout
      - run:
          name: test docker
          command: |
            cd backend
            npm install
            ls
            exit 1
            
  build-frontend:
    docker:
      - image: cimg/node:16.5.0
    steps:
      - checkout
      - restore_cache:
          keys: ['frontend-build-{{ checksum "frontend/package.json" }}']
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build-{{ checksum "frontend/package.json" }}          

  build-backend:
    docker:
      - image: cimg/node:16.5.0
    steps:
      - checkout
      - restore_cache:
          keys: ['backend-build-{{ checksum "backend/package.json" }}']
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build-{{ checksum "backend/package.json" }}

  test-frontend:
    docker:
      - image: cimg/node:16.5.0
    steps:
      - checkout
      - restore_cache:
          keys: ['frontend-build-{{ checksum "frontend/package.json" }}']
      - run:
          name: Test the code
          command: |
            cd frontend
            npm run test

  test-backend:
    docker:
      - image: cimg/node:16.5.0
    steps:
      - checkout
      - restore_cache:
          keys: ['backend-build-{{ checksum "backend/package.json" }}']
      - run:
          name: Test the code
          command: |
            cd backend
            npm run test

  deploy-infrastructure:
    docker:
      - image: python:3.7-alpine3.12
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip curl
            pip install awscli
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udacitycapstone-vitorpavan \
              --stack-name udacitycapstone-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udacitycapstone-vitorpavan \
              --stack-name udacitycapstone-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Get and save public DNS of EC2 instance to https://memstash.io/
          command: |
            export BACKEND_API=$(aws ec2 describe-instances \
              --region ${AWS_DEFAULT_REGION}\
              --filters "Name=tag:Name,Values=backend-ec2-${CIRCLE_WORKFLOW_ID:0:7}"\
              --query "Reservations[*].Instances[0].PublicDnsName" \
              --output text)
            echo ${BACKEND_API}
            # export URL="http://${BACKEND_API}:3030/api/status"
            echo ${URL}
            curl -H "Content-Type: text/plain" \
              -H "token:${CIRCLE_WORKFLOW_ID:0:7}" \
              --request PUT \
              --data "$URL" \
              https://api.memstash.io/values/url-${CIRCLE_WORKFLOW_ID:0:7}
      - destroy-environment

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.12
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["d6:a0:ab:8b:87:f6:b8:9d:4b:00:52:de:fd:8a:2b:4b"]
      - attach_workspace:
          at: ~/project      
      - run:
          name: Install system dependencies
          command: |
            apk add --update tar gzip ansible nodejs npm curl
            pip install awscli

      - run:
          name: Get the public DNS of EC2 from AWS
          command: |
            cd .circleci/ansible/
            aws ec2 describe-instances --region ${AWS_DEFAULT_REGION} \
            --filters "Name=tag:Name,Values=backend-ec2-${CIRCLE_WORKFLOW_ID:0:7}" \
            --query "Reservations[*].Instances[0].PublicDnsName" \
            --output text >> inventory.txt
            cat inventory.txt
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible/
            ansible-playbook -i inventory.txt configure-server.yml -l web     
      - destroy-environment

  deploy-frontend:
    docker:
      - image: python:3.7-alpine3.12
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
           apk add --update tar gzip ansible nodejs npm curl
           pip install awscli
      - restore_cache:
          keys: [frontend-build]           
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --region ${AWS_DEFAULT_REGION} \
              --filters "Name=tag:Name,Values=backend-ec2-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query "Reservations[*].Instances[0].PublicDnsName" \
              --output text)
            export REACT_APP_API_URL="http://${BACKEND_IP}:3030"
            echo "REACT_APP_API_URL=$REACT_APP_API_URL" > frontend/.env
            echo "${REACT_APP_API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install webpack-dev-server -g
            npm install
            npm run build
      - run: 
          name: Copy built frontend files to the S3 bucket
          command: |
            aws s3 cp ./frontend/build s3://udacitycapstone-${CIRCLE_WORKFLOW_ID:0:7}/ --recursive      
      - destroy-environment 

  deploy-backend:
    docker:
      - image: python:3.7-alpine3.12
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
           apk add --update tar gzip ansible nodejs npm curl
           pip install awscli      
      - add_ssh_keys:
          fingerprints: ["d6:a0:ab:8b:87:f6:b8:9d:4b:00:52:de:fd:8a:2b:4b"]      
      - attach_workspace:
          at: ~/project
      - restore_cache:
          keys: [backend-build]      
      - run:
          name: Install dependencies
          command: |
            cd backend
            npm install   
      - run:
          name: Get the public DNS of EC2 from AWS
          command: |
            aws ec2 describe-instances --region ${AWS_DEFAULT_REGION} \
            --filters "Name=tag:Name,Values=backend-ec2-${CIRCLE_WORKFLOW_ID:0:7}" \
            --query "Reservations[*].Instances[0].PublicDnsName" \
            --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - run:
          name: Deploy backend
          command: |
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt  deploy-backend.yml -l web        
      - destroy-environment         

workflows:
  default:
    jobs:
      - run-docker
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend]
          filters:
            branches:
              only: main
      - configure-infrastructure:
          requires: [deploy-infrastructure]
          filters:
            branches:
              only: main
      - deploy-frontend:
          requires: [configure-infrastructure]
          filters:
            branches:
              only: main
      - deploy-backend:
          requires: [configure-infrastructure]
          filters:
            branches:
              only: main              
