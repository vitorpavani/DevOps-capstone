version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo destroy environment
              aws s3 rb "s3://udacitycapstone-${CIRCLE_WORKFLOW_ID:0:7}" --force
              aws cloudformation delete-stack --stack-name "udacitycapstone-frontend-${CIRCLE_WORKFLOW_ID:0:7}"
              aws cloudformation delete-stack --stack-name "udacitycapstone-backend-${CIRCLE_WORKFLOW_ID:0:7}"

jobs:
  build-frontend:
    docker:
      - image: cimg/node:16.5.0
    steps:
      - checkout
      - restore_cache:
          keys: ['frontend-build-{{ checksum "frontend/package.json" }}']
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build-{{ checksum "frontend/package.json" }}

  build-backend:
    docker:
      - image: cimg/node:16.5.0
    steps:
      - checkout
      - restore_cache:
          keys: ['backend-build-{{ checksum "backend/package.json" }}']
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build-{{ checksum "backend/package.json" }}

  test-frontend:
    docker:
      - image: cimg/node:16.5.0
    steps:
      - checkout
      - restore_cache:
          keys: ['frontend-build-{{ checksum "frontend/package.json" }}']
      - run:
          name: Test the code
          command: |
            cd frontend
            npm run test

  test-backend:
    docker:
      - image: cimg/node:16.5.0
    steps:
      - checkout
      - restore_cache:
          keys: ['backend-build-{{ checksum "backend/package.json" }}']
      - run:
          name: Test the code
          command: |
            cd backend
            npm run test

  run-docker:
    machine: true
    steps:
      - checkout
      - restore_cache:
          keys: ['backend-build-{{ checksum "backend/package.json" }}']
      - run:
          name: login docker user
          command: |
            echo "$DOCKER_PASSWORD" | docker login --username $DOCKER_USER --password $DOCKER_PASSWORD
      - run:
          name: Install hadolint && Lint docker file
          command: |
            cd backend
            wget -O ./hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            chmod +x ./hadolint
            ./hadolint Dockerfile
      # build the application image
      - run:
          name: build the application image
          command: |
            cd backend
            docker build . -t vipavani85/capstone:latest

      # deploy the image
      - run:
          name: deploy the image
          command: |
            docker push vipavani85/capstone:latest

  deploy-infrastructure:
    docker:
      - image: python:3.7-alpine3.12
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip curl
            pip install awscli
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udacitycapstone-vitorpavan \
              --stack-name udacitycapstone-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udacitycapstone-vitorpavan \
              --stack-name udacitycapstone-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Get and save public DNS of EC2 instance to https://memstash.io/
          command: |
            export BACKEND_API=$(aws ec2 describe-instances \
              --region ${AWS_DEFAULT_REGION}\
              --filters "Name=tag:Name,Values=backend-ec2-${CIRCLE_WORKFLOW_ID:0:7}"\
              --query "Reservations[*].Instances[0].PublicDnsName" \
              --output text)
            echo ${BACKEND_API}
            # export URL="http://${BACKEND_API}:3030/api/status"
            echo ${URL}
            curl -H "Content-Type: text/plain" \
              -H "token:${CIRCLE_WORKFLOW_ID:0:7}" \
              --request PUT \
              --data "$URL" \
              https://api.memstash.io/values/url-${CIRCLE_WORKFLOW_ID:0:7}
      - destroy-environment

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.12
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["d6:a0:ab:8b:87:f6:b8:9d:4b:00:52:de:fd:8a:2b:4b"]
      - attach_workspace:
          at: ~/project
      - run:
          name: Install system dependencies
          command: |
            apk add --update tar gzip ansible nodejs npm curl
            pip install awscli

      - run:
          name: Get the public DNS of EC2 from AWS
          command: |
            cd .circleci/ansible/
            aws ec2 describe-instances --region ${AWS_DEFAULT_REGION} \
            --filters "Name=tag:Name,Values=backend-ec2-${CIRCLE_WORKFLOW_ID:0:7}" \
            --query "Reservations[*].Instances[0].PublicDnsName" \
            --output text >> inventory.txt
            cat inventory.txt
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible/
            ansible-playbook -i inventory.txt configure-server.yml -l web
      - destroy-environment

  deploy-frontend:
    docker:
      - image: python:3.7-alpine3.12
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
           apk add --update tar gzip ansible nodejs npm curl
           pip install awscli
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --region ${AWS_DEFAULT_REGION} \
              --filters "Name=tag:Name,Values=backend-ec2-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query "Reservations[*].Instances[0].PublicDnsName" \
              --output text)
            export REACT_APP_API_URL="http://${BACKEND_IP}:3030"
            echo "REACT_APP_API_URL=$REACT_APP_API_URL" > frontend/.env
            echo "${REACT_APP_API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install webpack-dev-server -g
            npm install
            npm run build
      - run:
          name: Copy built frontend files to the S3 bucket
          command: |
            aws s3 cp ./frontend/build s3://udacitycapstone-${CIRCLE_WORKFLOW_ID:0:7}/ --recursive
      - destroy-environment

  deploy-backend:
    docker:
      - image: vipavani85/capstone:latest
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible curl
            pip install awscli
            cd backend
            npm install
      - add_ssh_keys:
          fingerprints: ["d6:a0:ab:8b:87:f6:b8:9d:4b:00:52:de:fd:8a:2b:4b"]
      - attach_workspace:
          at: ~/project
      - run:
          name: Get the public DNS of EC2 from AWS
          command: |
            aws ec2 describe-instances --region ${AWS_DEFAULT_REGION} \
            --filters "Name=tag:Name,Values=backend-ec2-${CIRCLE_WORKFLOW_ID:0:7}" \
            --query "Reservations[*].Instances[0].PublicDnsName" \
            --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - run:
          name: Deploy backend
          command: |
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt  deploy-backend.yml -l web
      - destroy-environment

  smoke-test:
    docker:
      - image: python:3.7-alpine3.12
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
           apk add --update tar gzip ansible nodejs npm curl
           pip install awscli
      - run:
          name: Backend smoke test.
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --region ${AWS_DEFAULT_REGION} \
              --filters "Name=tag:Name,Values=backend-ec2-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query "Reservations[*].Instances[0].PublicDnsName" \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030/"
            echo ${API_URL}
            if (curl -s ${API_URL}) | grep "API Running"
            then
              return 0
            else
              return 1
            fi
      - run:
          name: Frontend smoke test
          command: |
            URL="http://udacitycapstone-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com"
            echo ${URL}
            if (curl -s ${URL}) | grep "Welcome"
            then
              return 0
            else
              return 1
            fi
      - destroy-environment

  cloudfront-update:
    docker:
      - image: python:3.7-alpine3.12
    steps:
      # Checkout code from git
      - checkout
      - add_ssh_keys:
          fingerprints: ["d6:a0:ab:8b:87:f6:b8:9d:4b:00:52:de:fd:8a:2b:4b"]
      - run:
          name: Install dependencies
          command: |
           apk add --update tar gzip ansible nodejs npm curl
           pip install awscli
      - run:
          name: Update cloudfront distribution
          command: |
            export OldWorkflowID=$(aws cloudformation \
                list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                --no-paginate --output text)
            echo OldWorkflowId: "${OldWorkflowID}"

            export STACKS=$(aws cloudformation list-stacks \
              --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --no-paginate --output text)
            echo Stacks: "${STACKS}"

            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --tags project=udacitycapstone-vitorpavan \
              --stack-name udacitycapstone-cloudfront \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}"

            if [[ -n "${OldWorkflowID}" ]]
            then
              echo "s3://udacitycapstone-${OldWorkflowID}"
              aws s3 rb "s3://udacitycapstone-${OldWorkflowID}" --force
              aws cloudformation delete-stack --stack-name "udacitycapstone-frontend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udacitycapstone-backend-${OldWorkflowID}"
            fi
      - destroy-environment

  test-cluster:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - checkout
      - kubernetes/install
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
      - run:
          command: |
            # kubectl apply -f .circleci/files/service.yml 
            kubectl get services
            kubectl get nodes -o wide
          name: Test cluster
orbs:
  aws-eks: circleci/aws-eks@0.2.3
  kubernetes: circleci/kubernetes@0.4.0
workflows:
  deployment:
    jobs:
      # - aws-eks/create-cluster:
      #     cluster-name: my-eks-demo
      - test-cluster:
          cluster-name: my-eks-demo
      #     requires:
      #       - aws-eks/create-cluster
      # - aws-eks/delete-cluster:
      #     cluster-name: my-eks-demo
      #     requires:
      #       - test-cluster

#   test-cluster:
#     executor: aws-eks/python3
#     parameters:
#       cluster-name:
#         description: |
#           Name of the EKS cluster
#         type: string
#     steps:
#       - checkout
#       - kubernetes/install
#       - aws-eks/update-kubeconfig-with-authenticator:
#           cluster-name: << parameters.cluster-name >>
#       - run:
#           command: |
#             # kubectl get services
#             # kubectl create -f .circleci/files/kubernete-backend.yml
#             # kubectl get deploy,po
#             # kubectl expose deployment nodejs --type="LoadBalancer"
#             kubectl get nodes
#             kubectl create deployment --image docker.io/vipavani85/capstone:latest node-app2
#             kubectl scale deployment node-app2 --replicas 1
#             kubectl expose deployment node-app2 --type=NodePort --port 3030
#             kubectl get services 
#             kubectl get nodes -o wide

#           name: Test cluster
# orbs:
#   aws-eks: circleci/aws-eks@0.2.3
#   kubernetes: circleci/kubernetes@0.4.0

# workflows:
#   deployment:
#     jobs:
#       # - aws-eks/create-cluster:
#       #     cluster-name: my-eks-6afe898
#       - test-cluster:
#           cluster-name: eks-demo-deployment
#           # requires:
#           #   - aws-eks/create-cluster
#       # - aws-eks/delete-cluster:
#       #     cluster-name: my-eks-6afe898
#       #     requires:
#       #       - test-cluster







      # - build-frontend
      # - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - run-docker:
      #     requires: [test-frontend, test-backend]
      #     filters:
      #       branches:
      #         only: main
      # - deploy-infrastructure:
      #     requires: [test-frontend, test-backend]
      #     filters:
      #       branches:
      #         only: main
      # - configure-infrastructure:
      #     requires: [deploy-infrastructure, run-docker]
      #     filters:
      #       branches:
      #         only: main
      # - deploy-frontend:
      #     requires: [configure-infrastructure]
      #     filters:
      #       branches:
      #         only: main
      # - deploy-backend:
      #     requires: [configure-infrastructure]
      #     filters:
      #       branches:
      #         only: main
      # - smoke-test:
      #     requires: [deploy-frontend, deploy-backend]
      #     filters:
      #       branches:
      #         only: main
      # - cloudfront-update:
      #     requires: [smoke-test]
      #     filters:
      #       branches:
      #         only: main